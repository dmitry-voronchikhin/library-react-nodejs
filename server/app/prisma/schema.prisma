// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Таблица для хранения refresh токенов
model Token {
  id           String @id @default(uuid()) /// Уникальный идентификатор
  refreshToken String @map("refresh_token") /// Refresh токен для обновления токена доступа
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @unique @map("user_id")

  @@map("token")
}

model Activation {
  id             String  @id @default(uuid()) /// Уникальный идентификатор
  activationLink String? @map("activation_link") /// Ссылка на активацию аккаунта
  isActivate     Boolean @default(false) @map("is_activate") /// Флаг, показываеющий, активирован ли аккаунт
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String  @unique @map("user_id")

  @@map("activation")
}

/// Таблица для хранения всех пользователей системы
model User {
  id         String      @id @default(uuid()) /// Уникальный идентификатор
  email      String      @unique /// Почта регистрации пользователя
  password   String /// Пароль пользователя
  token      Token? /// Токены доступа пользователей
  activation Activation? /// Информация об активации аккаунта
  role       Role        @default(READER) /// Роль пользователя

  @@map("user")
}

/// Таблица для хранения всех книг в библиотеке
model Book {
  id                String          @id @default(uuid()) /// Уникальный идентификатор
  name              String /// Наименование книги
  author            String /// Автор книги
  publishingHouse   PublishingHouse @relation(fields: [publishingHouseId], references: [id])
  publishingHouseId String          @map("publishing_house_id")
  reader            Reader?         @relation(fields: [readerId], references: [id])
  readerId          String?

  @@map("book")
}

/// Таблица для хранения всех издательств, использующихся в библиотечных книгах
model PublishingHouse {
  id      String @id @default(uuid()) /// Уникальный идентификатор
  name    String /// Наименование издательства
  address String /// Адрес местонахождения
  books   Book[] /// Книги издательства

  @@map("publishing_house")
}

/// Таблица для хранения всех читателей библиотеки
model Reader {
  id          String @id @default(uuid()) /// Уникальный идентификатор
  name        String /// ФИО читателя
  address     String /// Адрес места жительства
  phoneNumber String /// Номер телефона
  birthDate   String /// Дата рождения
  books       Book[] /// Книги, которые читатель взял

  @@map("reader")
}

enum Role {
  READER
  ADMIN
}
